//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//


@interface NRStateMachineState : NSObject <NSCoding>
{
    _Bool _shouldObliterate;
    _Bool _bluetoothPairingRequestSent;
    _Bool _isBluetoothOn;
    _Bool _isBluetoothPairComplete;
    _Bool _IDSAccountAndDevicePresent;
    _Bool _isInitialPropertiesReceived;
    _Bool _notFirstPairingAttempt;
    _Bool _waitingForPairingToContinue;
    _Bool _isBluetoothPaired;
    _Bool _isBluetoothPairedCheckValid;
    _Bool _isPairingVersionMismatched;
    _Bool _isIDSLocalSetupUnpairStartCalled;
    _Bool _isPairingClientProcessMonitoringDisabled;
    _Bool _conciousUnpairing;
    unsigned short _oldCompatibilityState;
    unsigned short _gizmoCompatibilityState;
    unsigned short _lastReceivedCompatibilityState;
    int _bluetoothPairRetries;
    id <NRStateMachineDelegate> _delegate;
    NSString *_advertisedName;
    NSString *_idsName;
    NSString *_currentStateName;
    NSUUID *_deviceID;
    NSNumber *_bluetoothPairRequestPasscode;
    long long _bluetoothPairRequestPairingType;
    NSUUID *_bluetoothPairRequestDeviceID;
    NSUUID *_bluetoothPairCompleteEventDeviceID;
    CBPeer *_bluetoothEventPeer;
    CBPeripheral *_bluetoothEventPeripheral;
    NSUUID *_bluetoothUnpairDeviceID;
    NSUUID *_bluetoothDiscoveryDeviceID;
    CBPeripheral *_bluetoothDiscoveryPeripheral;
    CBPeer *_xpcUnpairingRequestPeer;
    CBPeripheral *_xpcPairingRequestPeripheral;
    NSUUID *_xpcPairRequestDeviceID;
    CBPeer *_xpcPasscodeResponsePeer;
    NSUUID *_xpcPasscodeResponseDeviceID;
    NSNumber *_xpcPasscodeResponsePasscode;
    NSString *_xpcPairRequestAdvertisedName;
    NSData *_xpcPairingRequestOOBKey;
    long long _remotePairingVersion;
    NSMutableArray *_startupEventQueue;
    NSDate *_lastCompatibilityDialogDisplayDate;
    NSError *_pairingError;
    CBPeripheral *_operationPeripheral;
    NSString *_fakePairingRemoteUDID;
    NRPairingReport *_pairingReport;
    CBPeer *_operationPeer;
    NSData *_operationOOBKey;
    NSNumber *_operationPasscode;
    NSString *_pairingStartEventName;
}

@property(retain, nonatomic) NSString *pairingStartEventName; // @synthesize pairingStartEventName=_pairingStartEventName;
@property(retain, nonatomic) NSNumber *operationPasscode; // @synthesize operationPasscode=_operationPasscode;
@property(retain, nonatomic) NSData *operationOOBKey; // @synthesize operationOOBKey=_operationOOBKey;
@property(retain, nonatomic) CBPeer *operationPeer; // @synthesize operationPeer=_operationPeer;
@property(retain, nonatomic) NRPairingReport *pairingReport; // @synthesize pairingReport=_pairingReport;
@property(copy, nonatomic) NSString *fakePairingRemoteUDID; // @synthesize fakePairingRemoteUDID=_fakePairingRemoteUDID;
@property(nonatomic) unsigned short lastReceivedCompatibilityState; // @synthesize lastReceivedCompatibilityState=_lastReceivedCompatibilityState;
@property(retain, nonatomic) CBPeripheral *operationPeripheral; // @synthesize operationPeripheral=_operationPeripheral;
@property(nonatomic) _Bool conciousUnpairing; // @synthesize conciousUnpairing=_conciousUnpairing;
@property(retain, nonatomic) NSError *pairingError; // @synthesize pairingError=_pairingError;
@property(retain, nonatomic) NSDate *lastCompatibilityDialogDisplayDate; // @synthesize lastCompatibilityDialogDisplayDate=_lastCompatibilityDialogDisplayDate;
@property(nonatomic) _Bool isPairingClientProcessMonitoringDisabled; // @synthesize isPairingClientProcessMonitoringDisabled=_isPairingClientProcessMonitoringDisabled;
@property(nonatomic) unsigned short gizmoCompatibilityState; // @synthesize gizmoCompatibilityState=_gizmoCompatibilityState;
@property(nonatomic) unsigned short oldCompatibilityState; // @synthesize oldCompatibilityState=_oldCompatibilityState;
@property(retain, nonatomic) NSMutableArray *startupEventQueue; // @synthesize startupEventQueue=_startupEventQueue;
@property(nonatomic) _Bool isIDSLocalSetupUnpairStartCalled; // @synthesize isIDSLocalSetupUnpairStartCalled=_isIDSLocalSetupUnpairStartCalled;
@property(nonatomic) long long remotePairingVersion; // @synthesize remotePairingVersion=_remotePairingVersion;
@property(nonatomic) _Bool isPairingVersionMismatched; // @synthesize isPairingVersionMismatched=_isPairingVersionMismatched;
@property(nonatomic) _Bool isBluetoothPairedCheckValid; // @synthesize isBluetoothPairedCheckValid=_isBluetoothPairedCheckValid;
@property(nonatomic) _Bool isBluetoothPaired; // @synthesize isBluetoothPaired=_isBluetoothPaired;
@property(nonatomic) _Bool waitingForPairingToContinue; // @synthesize waitingForPairingToContinue=_waitingForPairingToContinue;
@property(nonatomic) _Bool notFirstPairingAttempt; // @synthesize notFirstPairingAttempt=_notFirstPairingAttempt;
@property(nonatomic) _Bool isInitialPropertiesReceived; // @synthesize isInitialPropertiesReceived=_isInitialPropertiesReceived;
@property(nonatomic) _Bool IDSAccountAndDevicePresent; // @synthesize IDSAccountAndDevicePresent=_IDSAccountAndDevicePresent;
@property(nonatomic) int bluetoothPairRetries; // @synthesize bluetoothPairRetries=_bluetoothPairRetries;
@property(nonatomic) _Bool isBluetoothPairComplete; // @synthesize isBluetoothPairComplete=_isBluetoothPairComplete;
@property(nonatomic) _Bool isBluetoothOn; // @synthesize isBluetoothOn=_isBluetoothOn;
@property(retain, nonatomic) NSData *xpcPairingRequestOOBKey; // @synthesize xpcPairingRequestOOBKey=_xpcPairingRequestOOBKey;
@property(retain, nonatomic) NSString *xpcPairRequestAdvertisedName; // @synthesize xpcPairRequestAdvertisedName=_xpcPairRequestAdvertisedName;
@property(retain, nonatomic) NSNumber *xpcPasscodeResponsePasscode; // @synthesize xpcPasscodeResponsePasscode=_xpcPasscodeResponsePasscode;
@property(retain, nonatomic) NSUUID *xpcPasscodeResponseDeviceID; // @synthesize xpcPasscodeResponseDeviceID=_xpcPasscodeResponseDeviceID;
@property(retain, nonatomic) CBPeer *xpcPasscodeResponsePeer; // @synthesize xpcPasscodeResponsePeer=_xpcPasscodeResponsePeer;
@property(retain, nonatomic) NSUUID *xpcPairRequestDeviceID; // @synthesize xpcPairRequestDeviceID=_xpcPairRequestDeviceID;
@property(retain, nonatomic) CBPeripheral *xpcPairingRequestPeripheral; // @synthesize xpcPairingRequestPeripheral=_xpcPairingRequestPeripheral;
@property(retain, nonatomic) CBPeer *xpcUnpairingRequestPeer; // @synthesize xpcUnpairingRequestPeer=_xpcUnpairingRequestPeer;
@property(nonatomic) _Bool bluetoothPairingRequestSent; // @synthesize bluetoothPairingRequestSent=_bluetoothPairingRequestSent;
@property(retain, nonatomic) CBPeripheral *bluetoothDiscoveryPeripheral; // @synthesize bluetoothDiscoveryPeripheral=_bluetoothDiscoveryPeripheral;
@property(retain, nonatomic) NSUUID *bluetoothDiscoveryDeviceID; // @synthesize bluetoothDiscoveryDeviceID=_bluetoothDiscoveryDeviceID;
@property(retain, nonatomic) NSUUID *bluetoothUnpairDeviceID; // @synthesize bluetoothUnpairDeviceID=_bluetoothUnpairDeviceID;
@property(retain, nonatomic) CBPeripheral *bluetoothEventPeripheral; // @synthesize bluetoothEventPeripheral=_bluetoothEventPeripheral;
@property(retain, nonatomic) CBPeer *bluetoothEventPeer; // @synthesize bluetoothEventPeer=_bluetoothEventPeer;
@property(retain, nonatomic) NSUUID *bluetoothPairCompleteEventDeviceID; // @synthesize bluetoothPairCompleteEventDeviceID=_bluetoothPairCompleteEventDeviceID;
@property(retain, nonatomic) NSUUID *bluetoothPairRequestDeviceID; // @synthesize bluetoothPairRequestDeviceID=_bluetoothPairRequestDeviceID;
@property(nonatomic) long long bluetoothPairRequestPairingType; // @synthesize bluetoothPairRequestPairingType=_bluetoothPairRequestPairingType;
@property(retain, nonatomic) NSNumber *bluetoothPairRequestPasscode; // @synthesize bluetoothPairRequestPasscode=_bluetoothPairRequestPasscode;
@property(retain, nonatomic) NSUUID *deviceID; // @synthesize deviceID=_deviceID;
@property(copy, nonatomic) NSString *currentStateName; // @synthesize currentStateName=_currentStateName;
@property(nonatomic) _Bool shouldObliterate; // @synthesize shouldObliterate=_shouldObliterate;
@property(copy, nonatomic) NSString *idsName; // @synthesize idsName=_idsName;
@property(copy, nonatomic) NSString *advertisedName; // @synthesize advertisedName=_advertisedName;
@property(nonatomic) __weak id <NRStateMachineDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
@property(readonly, nonatomic) unsigned short compatibilityState;
- (id)description;
- (unsigned short)compatibilityStateWithStateName:(id)arg1;
- (_Bool)didPairingReportRecordAFailure;
- (void)submitPairingReport;
- (void)setPairingReportErrorForRemoteError:(unsigned long long)arg1 withReason:(id)arg2;
- (void)setPairingReportErrorForPairingClient:(id)arg1 reason:(id)arg2;
- (_Bool)isBusy;
@property(readonly, nonatomic) _Bool isUnpaired;
@property(readonly, nonatomic) _Bool isPaired;
@property(readonly, nonatomic) _Bool isPairing;
@property(readonly, nonatomic) _Bool isOkayToStartOrRestartPairing;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end